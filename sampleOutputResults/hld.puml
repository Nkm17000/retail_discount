@startuml

class CalculateNetPayableAmountRequest {
    - User user
    - List<Bill> bills
}

class User {
    - int userId
    - UserType userType
    - LocalDate registrationDate
}

enum UserType {
    EMPLOYEE
    AFFILIATE
    CUSTOMER
}

class Bill {
    - int billId
    - double totalAmount
    - boolean isGrocery
}

interface DiscountStrategy {
    + calculateDiscount(User, Bill): double
}

class EmployeeDiscountStrategy {
    + calculateDiscount(User, Bill): double
}

class AffiliateDiscountStrategy {
    + calculateDiscount(User, Bill): double
}

class CustomerDiscountStrategy {
    + calculateDiscount(User, Bill): double
}

interface RetailStoreDiscountInterface {
    + calculateNetPayableAmount(User, List<Bill>): double
}

class RetailStoreDiscountsService {
    - double discountFor100
    - DiscountStrategy discountStrategy
    + calculateNetPayableAmount(User, List<Bill>): double
    + setDiscountStrategy(DiscountStrategy): void
    - getPayableAmount(User, Bill): double
    - calculateTotalDiscount(double, double): double
}

CalculateNetPayableAmountRequest --> User
CalculateNetPayableAmountRequest --> Bill
RetailStoreDiscountsService --> RetailStoreDiscountInterface
RetailStoreDiscountsService --> User
RetailStoreDiscountsService --> Bill
RetailStoreDiscountsService --> DiscountStrategy
EmployeeDiscountStrategy --> DiscountStrategy
AffiliateDiscountStrategy --> DiscountStrategy
CustomerDiscountStrategy --> DiscountStrategy

@enduml
