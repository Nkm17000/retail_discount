plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
    id 'checkstyle'
    id 'org.openrewrite.rewrite' version '6.8.2'
}
rewrite {
    activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")
}

group = 'com.nkm.discount'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.3.0")
}

tasks.named('test') {
    useJUnitPlatform()
}
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}


test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


jacocoTestReport {
    reports {
        csv.required = false
        xml.required = true
        xml.destination file("$buildDir/reports/jacoco/test/jacocoTestReport.xml")
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9090' // SonarQube server URL
        property 'sonar.projectKey', 'Retail_discount_1'
        property 'sonar.token', 'squ_359588b7d9284740ed365ab4d289a21101e0e6bc'
        property 'sonar.projectName', 'Reail Discount'
        property 'sonar.projectVersion', '1.0'
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.gradle.skipCompile", true
    }
}


subprojects {
    sonar {
        properties {
            property "sonar.sources", "src"
        }
    }
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}

/*
tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}
*/
